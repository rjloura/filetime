var N=null,E="",T="t",U="u",searchIndex={};
var R=["filetime","result","Set the last access and modification times for a file on…","metadata","option","Returns the whole number of seconds represented by this…","systemtime","ordering","formatter","FileTime"];

searchIndex["filetime"]={"doc":"Timestamps for files in Rust","i":[[3,R[9],R[0],"A helper structure to represent a timestamp for a file.",N,N],[5,"set_file_times",E,R[2],N,[[[R[0]],["p"]],[R[1]]]],[5,"set_file_handle_times",E,"Set the last access and modification times for a file…",N,[[["file"],[R[4],[R[0]]],[R[0]]],[R[1]]]],[5,"set_symlink_file_times",E,R[2],N,[[[R[0]],["p"]],[R[1]]]],[5,"set_file_mtime",E,"Set the last modification time for a file on the filesystem.",N,[[[R[0]],["p"]],[R[1]]]],[5,"set_file_atime",E,"Set the last access time for a file on the filesystem.",N,[[[R[0]],["p"]],[R[1]]]],[11,"zero",E,"Creates a new timestamp representing a 0 time.",0,[[],[R[0]]]],[11,"from_unix_time",E,"Creates a new instance of `FileTime` with a number of…",0,[[["i64"],["u32"]],[R[0]]]],[11,"from_last_modification_time",E,"Creates a new timestamp from the last modification time…",0,[[[R[3]]],[R[0]]]],[11,"from_last_access_time",E,"Creates a new timestamp from the last access time listed…",0,[[[R[3]]],[R[0]]]],[11,"from_creation_time",E,"Creates a new timestamp from the creation time listed in…",0,[[[R[3]]],[[R[4],[R[0]]],[R[0]]]]],[11,"from_system_time",E,"Creates a new timestamp from the given SystemTime.",0,[[[R[6]]],[R[0]]]],[11,"seconds",E,R[5],0,[[["self"]],["i64"]]],[11,"unix_seconds",E,R[5],0,[[["self"]],["i64"]]],[11,"nanoseconds",E,"Returns the nanosecond precision of this timestamp.",0,[[["self"]],["u32"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"to_string",E,E,0,[[["self"]],["string"]]],[11,"try_from",E,E,0,[[[U]],[R[1]]]],[11,"try_into",E,E,0,[[],[R[1]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"borrow_mut",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,0,[[[R[6]]],[R[0]]]],[11,"cmp",E,E,0,[[["self"],[R[0]]],[R[7]]]],[11,"partial_cmp",E,E,0,[[["self"],[R[0]]],[[R[4],[R[7]]],[R[7]]]]],[11,"lt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[8]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[8]]],[R[1]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]]],"p":[[3,R[9]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);